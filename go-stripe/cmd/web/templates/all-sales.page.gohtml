{{template "base" .}}

{{define "title"}}
    All Sales
{{end}}

{{define "content"}}
    <h2 class="mt-5">All Sales</h2>
    <table id="sales-table" class="table table-striped">
        <thead>
            <tr>
                <th>Transaction</th>
                <th>Customer</th>
                <th>Procuct</th>
                <th>Amount</th>
                <th>Status</th>
            </tr>
            <tbody></tbody>
        </thead>
    </table>

    <nav aria-label="Page navigation example">
        <ul id="paginator" class="pagination">
        </ul>
    </nav>
{{end}}

{{define "js"}}
<script>
    let currentPage = 1;
    let pageSize = 5;
    let token = localStorage.getItem("token");
    let tbody = document.getElementById("sales-table").getElementsByTagName("tbody")[0];

    function paginator(pages, currPage) {
        let p = document.getElementById("paginator");
        if (p.childElementCount > 0) {
            return;
        }
        let html = `<li class="page-item"><a class="page-link pager" href="#" data-page="${currPage - 1}">Previous</a></li>`
        for (let i = 0; i < pages; i++) {
            html += `<li class="page-item"><a class="page-link pager" href="#" data-page="${i + 1}">${i + 1}</a></li>`
        }
        html += `<li class="page-item"><a class="page-link pager" href="#" data-page="${currPage + 1}">Next</a></li>`
        p.innerHTML = html;
        p.childNodes[currentPage].firstChild.classList.add("active");

        let pgBtns = document.getElementsByClassName("pager");
        for (let j = 0; j < pgBtns.length; j++) {
            pgBtns[j].addEventListener("click", function(evt){
                let pageNo = evt.target.getAttribute("data-page");
                console.log(`clicked and desired page is ${pageNo}`);
                if (pageNo > 0 && pageNo <= pages) {
                    currentPage = pageNo;
                    let p = document.getElementById("paginator"); 
                    // remove active attribute from all pages
                    p.childNodes.forEach(el => el.firstChild.classList.remove("active"));
                    // get data from the server
                    updateTable(pageSize, currentPage);
                    // set active attribute to the page that is currently active
                    p.childNodes[parseInt(currentPage, 10)].firstChild.classList.add("active");
                    // update previous/next page attributes
                    p.childNodes[0].firstChild.setAttribute("data-page", parseInt(currentPage, 10) - 1);
                    p.childNodes[pages + 1].firstChild.setAttribute("data-page", parseInt(currentPage, 10) + 1);
                }
            });
        }
    }

    function updateTable(ps, cp) {
        let body = {
           page_size: parseInt(ps, 10),
           current_page: parseInt(cp, 10), 
        };

        const requestOptions = {
            method: "post",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`,
            },
            body: JSON.stringify(body),
        };

        fetch("{{.API}}/api/admin/all-sales", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                tbody.innerHTML = "";
                if (data.page_data && data.page_data.length > 0) {
                    data.page_data.forEach(function(i) {
                        let newRow = tbody.insertRow();
                        let newCell = newRow.insertCell();
                        newCell.innerHTML = `<a href="/admin/sales/${i.id}">Order ${i.id}</a>`;

                        newCell = newRow.insertCell();
                        let item = document.createTextNode(`${i.customer.last_name}, ${i.customer.first_name}`);
                        newCell.appendChild(item);

                        newCell = newRow.insertCell();
                        item = document.createTextNode(i.widget.name);
                        newCell.appendChild(item)

                        newCell = newRow.insertCell();
                        item = document.createTextNode(formatCurrency(i.transaction.amount));
                        newCell.appendChild(item)

                        newCell = newRow.insertCell();
                        if (i.status_id != 1) {
                            newCell.innerHTML = `<span class="badge bg-danger">Refunded</span>`;
                        } else {
                            newCell.innerHTML = `<span class="badge bg-success">Charged</span>`;
                        }
                    });
                    paginator(data.last_page, data.current_page);
                } else {
                    let newRow = tbody.insertRow();
                    let newCell = newRow.insertCell();
                    newCell.setAttribute("colspan", "5");
                    newCell.classList.add("text-center");
                    newCell.innerText= "No data available";
                }
            });
    }

    document.addEventListener("DOMContentLoaded", function() {
        updateTable(pageSize, currentPage);
    });
        function formatCurrency(amount) {
            let c = parseFloat(amount) / 100.0;
            return c.toLocaleString("en-US", {
                style: "currency",
                currency: "USD",
            });
        }
</script>
{{end}}